from random import randint# Hacer el algoritmo de n^3 y n^log pg 744 diapositivasdef Strassen3(A, B, n):    if n == 1:        return A[0][0] * B[0][0]    else:                m = n/2        A11 = list()        A12 = list()        A21 = list()        A22 = list()        B11 = list()        B12 = list()        B21 = list()        B22 = list()                for i in xrange(m):            tempA11 = list()            tempA12 = list()            tempA21 = list()            tempA22 = list()            tempB11 = list()            tempB12 = list()            tempB21 = list()            tempB22 = list()            for j in xrange(m):                tempA11.append(0)                tempA12.append(0)                tempA21.append(0)                tempA22.append(0)                tempB11.append(0)                tempB12.append(0)                tempB21.append(0)                tempB22.append(0)            A11.append(tempA11)            A12.append(tempA12)            A21.append(tempA21)            A22.append(tempA22)            B11.append(tempB11)            B12.append(tempB12)            B21.append(tempB21)            B22.append(tempB22)        for i in xrange(m):            for j in xrange(m):                A11[i][j] = A[i][j]                B11[i][j] = B[i][j]         for i in xrange(0,m):            for j in xrange(m,n):                A12[i][j-m] = A[i][j]                 B12[i][j-m] = B[i][j]                 for i in xrange(m,n):            for j in xrange(0,m):                A21[i-m][j] = A[i][j]                 B21[i-m][j] = B[i][j]         for i in xrange(m,n):            for j in xrange(m,n):                A22[i-m][j-m] = A[i][j]                 B22[i-m][j-m] = B[i][j]         X1 = Strassen3(A11, B11, m)        X2 = Strassen3(A12, B21, m)        X3 = Strassen3(A11, B12, m)        X4 = Strassen3(A12, B22, m)        X5 = Strassen3(A21, B11, m)        X6 = Strassen3(A22, B21, m)        X7 = Strassen3(A21, B12, m)        X8 = Strassen3(A22, B22, m)        C = list()        C11 = X1 + X2        C12 = X3 + X4        C21 = X5 + X6        C22 = X7 + X8        C.append(C11, C12))        C.append((C21, C22))        return Cdef Strassen(A, B, n):    if n == 1:        return A * B    else:        C = list()        for i in xrange(len(A)):            temp = list()            for j in xrange(len(A)):                temp.append(0)            C.append(temp)        S1 = (A[0][1] - A[1][1]) * (B[1][0] + B[1][1])        S2 = (A[0][0] + A[1][1]) * (B[0][0] + B[1][1])        S3 = (A[0][0] - A[1][0]) * (B[0][0] + B[0][1])        S4 = (A[0][0] + A[0][1]) * B[1][1]        S5 = A[0][0] * (B[0][1] - B[1][1])        S6 = A[1][1] * (B[1][0] - B[0][0])        S7 = (A[1][0] + A[1][1]) * B[0][0]        C[0][0] = S1 + S2 - S4 + S6        C[0][1] = S4 + S5        C[1][0] = S6 + S7        C[1][1] = S2 - S3 + S5 - S7        return Cn = 4A = list()B = list()for i in xrange(n):        tempA = list()        tempB = list()        for j in xrange(n):            tempA.append(randint(0,10*n))            tempB.append(randint(0,10*n))        A.append(tempA)        B.append(tempB)print "A", Aprint "B", BC = Strassen3(A, B, n)for i in xrange(len(C)):    for j in xrange(len(C[i])):        print C[i][j]print Strassen(A, B, n)